import React from 'react';

const ConcurrencyConcepts = () => {
  const concepts = [
    {
      title: '1. Process vs Thread',
      body: 'A Process is an independent program with its own memory. A Thread is a lightweight unit of execution within a process, sharing memory with other threads.',
      code: `// Creating a thread by extending Thread
class MyThread extends Thread {
    public void run() {
        System.out.println("Running in thread");
    }
}

// Using the thread
new MyThread().start();`
    },
    {
      title: '2. Concurrency vs Parallelism',
      body: 'Concurrency: multiple tasks make progress simultaneously (not necessarily at the same time).\nParallelism: multiple tasks run literally at the same time using multiple cores.',
      code: `ExecutorService executor = Executors.newFixedThreadPool(2);
executor.submit(() -> System.out.println("Task 1"));
executor.submit(() -> System.out.println("Task 2"));`
    },
    {
      title: '3. Thread Lifecycle',
      body: 'Thread states: NEW → RUNNABLE → RUNNING → BLOCKED/WAITING → TERMINATED.',
      code: `Thread t = new Thread(() -> {});
System.out.println(t.getState()); // NEW
t.start();
System.out.println(t.getState()); // RUNNABLE`
    },
    {
      title: '4. Race Condition',
      body: 'Occurs when threads change shared data at the same time, leading to incorrect results.',
      code: `// Unsafe increment
int counter = 0;
Runnable r = () -> counter++;
new Thread(r).start();
new Thread(r).start();`
    },
    {
      title: '5. Thread Safety',
      body: 'Thread-safe means results are correct when accessed by multiple threads. Achieved via synchronization or atomic classes.',
      code: `public synchronized void increment() {
    counter++;
}`
    },
    {
      title: '6. Mutual Exclusion (Mutex)',
      body: 'Ensures only one thread enters a critical section at a time.',
      code: `synchronized(this) {
    // critical section
}`
    },
    {
      title: '7. Deadlock',
      body: 'Two threads hold locks and wait for each other, causing both to block forever.',
      code: `synchronized(lock1) {
    synchronized(lock2) {
        // Do something
    }
}
// Another thread reverses the lock order -> Deadlock`
    },
    {
      title: '8. Livelock',
      body: 'Threads keep responding to each other but can’t make progress.',
      code: `// Both threads keep yielding for the other, but never proceed
while (true) {
    if (other.isTrying()) {
        Thread.yield();
    } else {
        proceed();
    }
}`
    },
    {
      title: '9. Starvation',
      body: 'A thread is continually denied access to resources due to high-priority threads.',
      code: `// Caused by unfair locks or high-priority loops
while (true) {
    // hogs CPU
}`
    },
    {
      title: '10. Thread Communication',
      body: 'Threads can coordinate using wait()/notify() or higher-level concurrency APIs.',
      code: `synchronized (lock) {
    while (!condition) {
        lock.wait();
    }
    // do work
    lock.notifyAll();
}`
    },
    {
      title: '11. Volatile',
      body: 'Volatile ensures visibility of changes to variables across threads.',
      code: `private volatile boolean flag = true;
while (flag) {
    // work
}`
    },
    {
      title: '12. Atomicity, Visibility, Ordering',
      body: 'Atomicity: indivisible actions.\nVisibility: one thread sees changes made by another.\nOrdering: prevents reordering via synchronized or volatile.',
      code: `AtomicInteger count = new AtomicInteger(0);
count.incrementAndGet(); // atomic operation`
    },
    {
      title: '13. Thread Pooling',
      body: 'Uses a pool of reusable threads to execute tasks efficiently.',
      code: `ExecutorService pool = Executors.newFixedThreadPool(4);
pool.submit(() -> System.out.println("task"));`
    },
    {
      title: '14. Futures and Callables',
      body: 'Allow asynchronous task execution with a return value.',
      code: `Future<Integer> future = pool.submit(() -> 42);
System.out.println(future.get());`
    },
    {
      title: '15. Locks and Sync Tools',
      body: 'Advanced locking tools provide more flexibility than synchronized.',
      code: `Lock lock = new ReentrantLock();
lock.lock();
try {
    // critical section
} finally {
    lock.unlock();
}`
    }
  ];

  return (
    <div className="container my-5">
      <h2 className="mb-4">Java Concurrency Concepts</h2>
      <div className="accordion" id="concurrencyAccordion">
        {concepts.map((concept, index) => (
          <div className="accordion-item" key={index}>
            <h2 className="accordion-header" id={`heading${index}`}>
              <button
                className={`accordion-button ${index !== 0 ? 'collapsed' : ''}`}
                type="button"
                data-bs-toggle="collapse"
                data-bs-target={`#collapse${index}`}
                aria-expanded={index === 0 ? 'true' : 'false'}
                aria-controls={`collapse${index}`}
              >
                {concept.title}
              </button>
            </h2>
            <div
              id={`collapse${index}`}
              className={`accordion-collapse collapse ${index === 0 ? 'show' : ''}`}
              aria-labelledby={`heading${index}`}
              data-bs-parent="#concurrencyAccordion"
            >
              <div className="accordion-body">
                <p>{concept.body}</p>
                <pre><code>{concept.code}</code></pre>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ConcurrencyConcepts;